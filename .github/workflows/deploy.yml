name: deploy

on:
  push:
    branches: ["master"]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Login to GitHub Container Registry
      run: |
        echo ${{ secrets.PAT }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        
    - name: Set up lower case variables
      id: vars
      run: |
        OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        REPO_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
        echo "owner_lower=$OWNER_LOWER" >> $GITHUB_OUTPUT
        echo "repo_lower=$REPO_LOWER" >> $GITHUB_OUTPUT
        
    - name: Install yq
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        pip3 install yq
        
    - name: Build and push all services
      run: |
        # Получаем список всех сервисов
        SERVICES=$(yq -r '.services | keys | .[]' docker-compose.yml)
        
        for SERVICE in $SERVICES; do
          # Получаем контекст сборки
          CONTEXT=$(yq -r ".services.$SERVICE.build.context // \".\"" docker-compose.yml)
          
          # Получаем путь к Dockerfile
          DOCKERFILE=$(yq -r ".services.$SERVICE.build.dockerfile // \"Dockerfile\"" docker-compose.yml)
          
          # Формируем полный путь
          if [ "$CONTEXT" = "." ]; then
            FULL_DOCKERFILE="$DOCKERFILE"
          else
            FULL_DOCKERFILE="$CONTEXT/$DOCKERFILE"
          fi
          
          echo "Building $SERVICE from $FULL_DOCKERFILE"
          
          # Формируем имя образа в нижнем регистре
          IMAGE_NAME=$(echo "$SERVICE" | tr '[:upper:]' '[:lower:]')
          
          docker build \
            -f "$FULL_DOCKERFILE" \
            -t "${{ env.REGISTRY }}/${{ steps.vars.outputs.owner_lower }}/${{ steps.vars.outputs.repo_lower }}/$IMAGE_NAME:latest" \
            "$CONTEXT"
            
          docker push "${{ env.REGISTRY }}/${{ steps.vars.outputs.owner_lower }}/${{ steps.vars.outputs.repo_lower }}/$IMAGE_NAME:latest"
        done

  deploy:
    # ... (остальная часть workflow остается без изменений)
    name: Deploy
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install SSH keys
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
        
    - name: Transfer files to server
      run: |
        tar -czf deploy.tar.gz .
        scp deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/deploy.tar.gz
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          mkdir -p ~/deploy &&
          tar -xzf ~/deploy.tar.gz -C ~/deploy &&
          rm ~/deploy.tar.gz
        "
        
    - name: Deploy application
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd ~/deploy &&
          docker-compose pull &&
          docker-compose up -d
        "
        
    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/.ssh deploy.tar.gz
